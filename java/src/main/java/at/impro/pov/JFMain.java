/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package at.impro.pov;

import com.sun.xml.internal.messaging.saaj.packaging.mime.util.BASE64EncoderStream;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.awt.Image;
import java.awt.Rectangle;
import java.awt.Robot;
import java.awt.image.BufferedImage;
import java.io.OutputStream;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.Socket;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;

/**
 *
 * @author patrick
 */
public class JFMain extends javax.swing.JFrame {
    JFCaptureWindow window;
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTIPAddress = new javax.swing.JTextField();
        jBStartStop = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jLProgress = new javax.swing.JList<>();
        jLabel2 = new javax.swing.JLabel();
        jLStatus = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("IP Address");

        jTIPAddress.setText("192.168.4.1");

        jBStartStop.setText("Start");
        jBStartStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBStartStopActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(jLProgress);

        jLabel2.setText("Status:");

        jLStatus.setText("    ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jBStartStop, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(jTIPAddress))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 261, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLStatus)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTIPAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBStartStop)
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLStatus))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 152, Short.MAX_VALUE)
                .addGap(13, 13, 13))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //jFWindow window = new jFWindow();
    /**
     * Creates new form Main
     */
    public JFMain() {
        initComponents();
        jLProgress.setModel(new DefaultListModel<>());
        //window.setVisible(true);
        window= new JFCaptureWindow();
        window.setVisible(true);
    }

    
    private class PMySwingWorker extends MySwingWorker<String, String>{
        String ipAddress= "";
        @Override
        protected final void done(String message, Exception ex, boolean canceled) {
            stop();
            if (ex!=null){
                ex.printStackTrace();
                addProgressElement(ex.getMessage());
            }
            if(message!=null){
                addProgressElement(message);
            }
        }

        @Override
        protected void progress(int progress, String message) {
            jLStatus.setText(message);
        }

        @Override
        protected final void process(List<String> chunks) {
            chunks.forEach((message) -> {addProgressElement(message);});        
        }
        //*
        @Override
        protected String doInBackground() throws Exception {
            //200*200*3*24 =~22Mbit/s
            int outputsize=131;   
            int port= 9999;
            int fps=26;
            int bits=12; //8 or 12
            
            Robot robot = new Robot();

            Rectangle allScreenBounds = new Rectangle(window.getLocation(),window.getSize());
            allScreenBounds.width=Math.min(allScreenBounds.width,allScreenBounds.height);
            allScreenBounds.height=allScreenBounds.width;
            publish("Captrue at: "+allScreenBounds.toString());
            
            Color[] colors;
            byte[] data;
            if(bits==8){
                colors = new Color[outputsize*outputsize];
                data = new byte[outputsize*outputsize]; //8 bit RGB (3 bit Red,3 bit Green, 2bit Blue)
            }
            else{ //12bit
                colors = new Color[outputsize*outputsize-19*19*4+1];
                colors[outputsize*outputsize-19*19*4] = Color.BLACK;
                data = new byte[(outputsize*outputsize-19*19*4+1)*3/2]; //12 bit RGB (4 bit Red,4 bit Green, 4bit Blue)                
            }
            long secoundtimer = System.currentTimeMillis();
            int framecounter=0;            

            Socket socket = new Socket(ipAddress, port);
            OutputStream os = socket.getOutputStream();
            while(true)
            {
                //Take time:
                long starttime = System.currentTimeMillis();
                //Take Screen Shot
                BufferedImage screenShot = robot.createScreenCapture(allScreenBounds);
                //Scale Image
                Image tmp = screenShot.getScaledInstance(outputsize, outputsize, Image.SCALE_SMOOTH);
                BufferedImage image = new BufferedImage(outputsize, outputsize, BufferedImage.TYPE_INT_ARGB);
                Graphics2D g2d = image.createGraphics();
                g2d.drawImage(tmp, 0, 0, null);
                g2d.dispose();            
                
                //JLabel lbl = new JLabel(new ImageIcon(image));
                //JOptionPane.showMessageDialog(null, lbl, "ImageDialog", 
                //                     JOptionPane.PLAIN_MESSAGE, null);
                if(bits==8){
                    for (int x=0;x<outputsize;x++){
                        for (int y=0;y<outputsize;y++){
                            colors[x+outputsize*y]= new Color(image.getRGB(x, y));
                        }
                    }
                    //Convert Image to data string
                    for (int i=0;i<colors.length;i++){
                        //Bit    7  6  5  4  3  2  1  0
                        //Data   R  R  R  G  G  G  B  B
                        data[i] = (byte)(((colors[i].getRed()   >> 5) << 5) + ((colors[i].getGreen() >> 5) << 2)+  (colors[i].getBlue()  >> 6));
                    }
                }
                else{ //12 bit
                    int j=0;
                    for (int x=0;x<outputsize;x++){
                        for (int y=0;y<outputsize;y++){
                            if((x<19 || x>=outputsize-19) && (y<19 || y>=outputsize-19)){
                                //Dont use that PIXEL
                            }
                            else{
                                
                                if(false){
                                    Color c= new Color(255,255,255);
                                    
                                    colors[j++]= c;
                                }
                                else{
                                    colors[j++]= new Color(image.getRGB(x, y));
                                }
                            }
                        }
                    }
                    j=0;
                    for (int i=0;i<colors.length;i+=2){
                        //Bit    7  6  5  4  3  2  1  0
                        //Color0 R  R  R  R  G  G  G  G
                        data[j++] =  (byte)((colors[i].getRed() & 0xf0) | ((colors[i].getGreen() >> 4)& 0x0f));
                        //Bit    7  6  5  4  3  2  1  0
                        //Color0 B  B  B  B 
                        //Color1             R  R  R  R
                        data[j++] =  (byte)((colors[i].getBlue() & 0xf0) | ((colors[i+1].getRed() >> 4)& 0x0f));
                        //Bit    7  6  5  4  3  2  1  0
                        //Color1 G  G  G  G  B  B  B  B
                        data[j++] =  (byte)((colors[i+1].getGreen() & 0xf0) | ((colors[i+1].getBlue() >> 4)& 0x0f));
                    }
                }
                //Send date
                os.write(data);
                //os.flush(); 
                
                framecounter++;
                if(secoundtimer+1000<System.currentTimeMillis()){
                    double nettofps=(double)framecounter/(System.currentTimeMillis()-secoundtimer)*1000.0;
                    progress(0, ""+String.format( "%.2f", nettofps )+"fps = "+String.format( "%.2f", nettofps*data.length*8/1024/1024 )+"Mbit/s");
                    secoundtimer = System.currentTimeMillis();
                    framecounter=0;
                }

                //Sleep
                long timetaken = System.currentTimeMillis()-starttime;                
                Thread.sleep(Math.max(1,1000/fps-timetaken));
            }
            
            
        }
        //*/
        
        /*
        @Override
        protected String doInBackground() throws Exception {
            int outputsize=131;   
            int port= 9999;
            int fps=26;
            int bits=8; //8 or 12
            
            Robot robot = new Robot();

            Rectangle allScreenBounds = new Rectangle(window.getLocation(),window.getSize());
            allScreenBounds.width=Math.min(allScreenBounds.width,allScreenBounds.height);
            allScreenBounds.height=allScreenBounds.width;
            publish("Captrue at: "+allScreenBounds.toString());
            
            DatagramSocket socket = new DatagramSocket();
            InetAddress adress = InetAddress.getByName(ipAddress);
            
            Color[] colors = new Color[outputsize*outputsize+1];
            byte[] data;
            if(bits==8){
                colors = new Color[outputsize*outputsize];
                data = new byte[outputsize*outputsize]; //8 bit RGB (3 bit Red,3 bit Green, 2bit Blue)
            }
            else{ //12bit
                data = new byte[(outputsize*outputsize+1)/2*3]; //12 bit RGB (4 bit Red,4 bit Green, 4bit Blue)                
                colors = new Color[outputsize*outputsize+1];
                colors[outputsize*outputsize] = Color.BLACK;
            }
            long secoundtimer = System.currentTimeMillis();
            int framecounter=0;            
            while(true)
            {
                //Take time:
                long starttime = System.currentTimeMillis();
                //Take Screen Shot
                BufferedImage screenShot = robot.createScreenCapture(allScreenBounds);
                //Scale Image
                Image tmp = screenShot.getScaledInstance(outputsize, outputsize, Image.SCALE_SMOOTH);
                BufferedImage image = new BufferedImage(outputsize, outputsize, BufferedImage.TYPE_INT_ARGB);
                Graphics2D g2d = image.createGraphics();
                g2d.drawImage(tmp, 0, 0, null);
                g2d.dispose();            
                
                //JLabel lbl = new JLabel(new ImageIcon(image));
                //JOptionPane.showMessageDialog(null, lbl, "ImageDialog", 
                //                     JOptionPane.PLAIN_MESSAGE, null);
                for (int x=0;x<outputsize;x++){
                    for (int y=0;y<outputsize;y++){
                        colors[x+outputsize*y]= new Color(image.getRGB(x, y));
                    }
                }
                if(bits==8){
                    //Convert Image to data string
                    for (int i=0;i<colors.length;i++){
                        //Bit    7  6  5  4  3  2  1  0
                        //Data   R  R  R  G  G  G  B  B
                        data[i] = (byte)(((colors[i].getRed()   >> 5) << 5) + ((colors[i].getGreen() >> 5) << 2)+  (colors[i].getBlue()  >> 6));
                    }
                }
                else{ //12 bit
                    int j=0;
                    for (int i=0;i<colors.length;i+=2){
                        //Bit    7  6  5  4  3  2  1  0
                        //Color0 R  R  R  R  G  G  G  G
                        data[j++] =  (byte)(((colors[i].getRed() >>4)) <<4 + (colors[i].getGreen() >> 4));
                        //Bit    7  6  5  4  3  2  1  0
                        //Color0 B  B  B  B 
                        //Color1             R  R  R  R
                        data[j++] =  (byte)(((colors[i].getBlue()>>4)) <<4 + (colors[i+1].getRed()>> 4));
                        //Bit    7  6  5  4  3  2  1  0
                        //Color1 G  G  G  G  B  B  B  B
                        data[j++] =  (byte)(((colors[i+1].getGreen()>>4)) <<4 + (colors[i+1].getBlue()>> 4));
                    }
                }
                //Send date
                byte[] packed = new byte[512]; 
                for(int i=0;i<data.length;){
                    packed[0]=(byte)(i/256);
                    packed[1]=(byte)(i%256);
                    int length = Math.min(510, data.length-i);
                    System.arraycopy(data,i,packed,2,length);
                    DatagramPacket p = new DatagramPacket(packed, length+2 , adress, port);
                    socket.send(p);
                    i+=510;                    
                }
                
                
                framecounter++;
                if(secoundtimer+1000<System.currentTimeMillis()){
                    double nettofps=(double)framecounter/(System.currentTimeMillis()-secoundtimer)*1000.0;
                    progress(0, ""+String.format( "%.2f", nettofps )+"fps = "+String.format( "%.2f", nettofps*data.length*8/1024/1024 )+"Mbit/s");
                    secoundtimer = System.currentTimeMillis();
                    framecounter=0;
                }

                //Sleep
                long timetaken = System.currentTimeMillis()-starttime;                
                Thread.sleep(Math.max(1,1000/fps-timetaken));
            }
            
            
        }
        //*/
        
    }
    
    PMySwingWorker worker = null;
    
    
    void start(){
        window.setVisible(false);
        jTIPAddress.setEnabled(false);
        jBStartStop.setText("Stop");
        jLProgress.setModel(new DefaultListModel<>());
        jLStatus.setText("");
        worker= new PMySwingWorker();
        worker.ipAddress= jTIPAddress.getText();
        worker.execute();
    }
    void stop(){
        window.setVisible(true);
        jTIPAddress.setEnabled(true);
        jBStartStop.setText("Start");
    }
    
    void addProgressElement(String message){
        DefaultListModel<String> list = (DefaultListModel<String>) jLProgress.getModel();
        for(String line: message.split(System.getProperty("line.separator")))
            list.addElement(line);       
    }
    
    private void jBStartStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBStartStopActionPerformed
        if (worker!=null && worker.isRunning()){
            worker.cancel();
        }
        else{
            start();
        }

    }//GEN-LAST:event_jBStartStopActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        /*     
         int j=0;
         for (int x=0;x<131;x++){
             for (int y=0;y<131;y++){
                 if((x<19 || x>=131-19) && (y<19 || y>=131-19)){
                     System.out.print(";");
                 }
                 else{
                     System.out.print(j++);
                     System.out.print(";");
                 }
             }
             System.out.println();
         }
          */   
        
        // Determine what the GraphicsDevice can support.
        GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
        GraphicsDevice gd = ge.getDefaultScreenDevice();
        boolean isPerPixelTranslucencySupported = gd.isWindowTranslucencySupported(GraphicsDevice.WindowTranslucency.PERPIXEL_TRANSLUCENT);

        //If translucent windows aren't supported, exit.
        if (!isPerPixelTranslucencySupported) {
            System.out.println(
                "Per-pixel translucency is not supported");
                System.exit(0);
        }

        JFrame.setDefaultLookAndFeelDecorated(true);
                
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JFMain().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBStartStop;
    private javax.swing.JList<String> jLProgress;
    private javax.swing.JLabel jLStatus;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTIPAddress;
    // End of variables declaration//GEN-END:variables
}
